package main

import (
	"github.com/iris-contrib/swagger/v12"
	"github.com/iris-contrib/swagger/v12/swaggerFiles"
	"github.com/kataras/iris/v12"
	"github.com/kataras/iris/v12/hero"
	"github.com/markbates/goth/v1.62.0"
	"github.com/markbates/goth/v1.62.0/providers/openidConnect"

	_ "github.com/lionize/SettingsService/src/docs" // docs is generated by Swag CLI, you have to import it.
)

// @title TIKSN Lionize Settings Service API
// @version 1.0
// @description This is a sample server Petstore server.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host petstore.swagger.io
// @BasePath /v2

func main() {
	// OpenID Connect is based on OpenID Connect Auto Discovery URL (https://openid.net/specs/openid-connect-discovery-1_0-17.html)
	// because the OpenID Connect provider initialize it self in the New(), it can return an error which should be handled or ignored
	// ignore the error for now
	identityBaseAddress := os.Getenv("Services__Identity__BaseAddress")
	apiName := os.Getenv("ApiResource__ApiName")
	apiSecret := os.Getenv("ApiResource__ApiSecret")

	callbackUrl := fmt.Sprintf("%s/auth/openid-connect/callback", identityBaseAddress)
	discoveryUrl := fmt.Sprintf("%s/.well-known/openid-configuration", identityBaseAddress)
	log.Printfln("OpenID Connect callback URL: %s", callbackUrl)
	log.Printfln("OpenID Connect discovery URL: %s", discoveryUrl)

	openidConnect, _ := openidConnect.New(apiName, apiSecret, callbackUrl, discoveryUrl)
	if openidConnect != nil {
		goth.UseProviders(openidConnect)
	}

	app := iris.Default()

	config := &swagger.Config{
		URL: "http://localhost:8080/swagger/doc.json", //The url pointing to API definition
	}

	app.Get("/swagger/{any:path}", swagger.CustomWrapHandler(config, swaggerFiles.Handler))

	api := app.Party("/api")
	{
		v1 := api.Party("/1.0")
		{
			composite := v1.Party("/Composite")
			{
				hero.Register(&compositeSettingsRetrievalService{})
				settingsRetrievalHandler := hero.Handler(getSettings)
				composite.Get("/{path:path}", settingsRetrievalHandler)
			}
		}
	}

	app.Run(iris.Addr(":8080"))
}
